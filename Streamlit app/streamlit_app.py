import streamlit as st
import folium
from streamlit_folium import folium_static
import pandas as pd
import json
from geopy.distance import geodesic
from sklearn.cluster import KMeans
import os

# --- Sidhuvud ---
st.set_page_config(page_title="G√∂teborgs lekplatskarta", layout="wide")
st.title("G√∂teborgs lekplatskarta")

with st.expander("‚ÑπÔ∏è Klicka h√§r f√∂r att l√§sa hur kartan fungerar"):
    st.markdown("""
    **V√§lkommen till Lekplatskartan!**

    Den h√§r interaktiva kartan hj√§lper dig att hitta roliga lekplatser i G√∂teborg samtidigt som den visar hur l√•ngt det √§r till n√§rmaste kollektivtrafikh√•llplats.

    üí° **S√• h√§r g√∂r du:**
    - Anv√§nd menyn till v√§nster f√∂r att hitta lekplatser n√§ra en viss h√•llplats.
    - Justera avst√•ndsradien f√∂r att visa fler eller f√§rre lekplatser.
    - Klicka p√• en lekplats p√• kartan f√∂r att se avst√•nd och uppskattad g√•ngtid.

    Legend med f√§rgf√∂rklaringar finns l√§ngre ner p√• sidan.

    **Trevlig lek!**
    """)

st.markdown("**Denna karta visar lekplatser f√§rgkodade efter avst√•nd till n√§rmaste h√•llplats.**")

# --- L√§s lekplatser ---
current_dir = os.path.dirname(__file__)
file_path = os.path.join(current_dir, "lekplatser_ny.json")
with open(file_path, "r", encoding="utf-8") as f:
    lekplatser_data = json.load(f)

lekplatser_df = pd.DataFrame([{
    'name': el.get('tags', {}).get('name', 'Ok√§nd lekplats'),
    'lat': el['lat'],
    'lon': el['lon'],
    'typ': 'lekplats'
} for el in lekplatser_data])

# --- L√§s h√•llplatser ---
stop_df = pd.read_csv(os.path.join(current_dir, "stops.txt"))

stop_df = stop_df[
    (stop_df['stop_lat'] >= 57.5) & (stop_df['stop_lat'] <= 57.85) &
    (stop_df['stop_lon'] >= 11.7) & (stop_df['stop_lon'] <= 12.1)
]

# --- L√§s toaletter ---
with open(os.path.join(current_dir, "toaletter.json"), "r", encoding="utf-8") as f:
    toaletter_data = json.load(f)

toaletter_df = pd.DataFrame([{
    'lat': el['lat'],
    'lon': el['lon'],
} for el in toaletter_data])

#Ta bara en rad per h√•llplats-per h√•llplats namn (f√∂rsta stop ID r√§cker)
stop_df = stop_df.drop_duplicates(subset='stop_name', keep='first')

stop_df = stop_df.rename(columns={
    'stop_name': 'name', 'stop_lat': 'lat', 'stop_lon': 'lon'
})

stop_df['typ'] = 'h√•llplats'

# Kombinera
combined_df = pd.concat([lekplatser_df, stop_df[['name', 'lat', 'lon', 'typ']]], ignore_index=True)
lekplatser = combined_df[combined_df['typ'] == 'lekplats'].copy()
h√•llplatser = combined_df[combined_df['typ'] == 'h√•llplats'].copy()

# --- Ber√§kna avst√•nd till n√§rmaste h√•llplats ---
def n√§rmaste_avst√•nd(lat, lon, h√•llplatser):
    lekplats_pos = (lat, lon)
    return min(geodesic(lekplats_pos, (r['lat'], r['lon'])).meters for _, r in h√•llplatser.iterrows())

lekplatser['avst√•nd_m'] = lekplatser.apply(
    lambda row: n√§rmaste_avst√•nd(row['lat'], row['lon'], h√•llplatser), axis=1
)

def uppskattad_g√•ngtid(meter):
    minuter = int(round(meter/83))  # 5 km/h g√•nghastighet
    return f"~{minuter} min"

#Ber√§kna avst√•nd till n√§rmast toalett
def n√§rmaste_toalett_avst√•nd(lat, lon, toaletter):
    pos = (lat, lon)
    return min(geodesic(pos, (r['lat'], r['lon'])).meters for _, r in toaletter.iterrows())

lekplatser['avst√•nd_toalett'] = lekplatser.apply(
    lambda row: n√§rmaste_toalett_avst√•nd(row['lat'], row['lon'], toaletter_df), axis=1
)

# --- Sidopanel: filtreringsgr√§nssnitt ---
valda_h√•llplatsnamn = st.sidebar.selectbox(
    "Filtrera lekplatser n√§ra en viss h√•llplats:",
    options=h√•llplatser['name'].sort_values().unique(),
    index=None,
    placeholder="V√§lj en h√•llplats"
)
radie = st.sidebar.slider("Avst√•ndsradie (meter)", 100, 2000, 500, step=100)

st.sidebar.markdown("### Klustringsmetod")
klustringsval = st.sidebar.radio(
    "V√§lj vad lekplatserna ska klustras utifr√•n:",
    options=["H√•llplatsavst√•nd", "Toalettavst√•nd", "B√•de h√•llplats + toalett"],
    index=0
)

# --- Klustring och f√§rger ---

from sklearn.preprocessing import StandardScaler

# V√§lj variabler beroende p√• klustringsval
if klustringsval == "H√•llplatsavst√•nd":
    X = lekplatser[['avst√•nd_m']].dropna().values
elif klustringsval == "Toalettavst√•nd":
    X = lekplatser[['avst√•nd_toalett']].dropna().values
else:  # B√•de
    X = lekplatser[['avst√•nd_m', 'avst√•nd_toalett']].dropna().values

# Skala
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Klustring
n_clusters = 4 if klustringsval == "H√•llplatsavst√•nd" else 5
kmeans = KMeans(n_clusters=n_clusters, random_state=0, n_init='auto').fit(X_scaled)

# Om du har droppat rader, uppdatera √§ven lekplatser (detta beh√∂vs bara om du anv√§nder X_scaled direkt med annan df)
lekplatser = lekplatser.dropna(subset=['avst√•nd_m', 'avst√•nd_toalett']).copy()
lekplatser['kluster'] = kmeans.labels_

# --- Sortera kluster baserat p√• medelavst√•nd till h√•llplats eller annan logik ---
if klustringsval == "H√•llplatsavst√•nd":
    kluster_medel = lekplatser.groupby('kluster')['avst√•nd_m'].mean().sort_values()
elif klustringsval == "Toalettavst√•nd":
    kluster_medel = lekplatser.groupby('kluster')['avst√•nd_toalett'].mean().sort_values()
else:
    # Kombinera avst√•nd till b√•de h√•llplats och toalett
    lekplatser['combo'] = lekplatser['avst√•nd_m'] + lekplatser['avst√•nd_toalett']
    kluster_medel = lekplatser.groupby('kluster')['combo'].mean().sort_values()

# --- Tilldela f√§rger dynamiskt ---
tillg√§ngliga_f√§rger = ['green', 'orange', 'red', 'purple', 'black']
f√§rger_sorterade = tillg√§ngliga_f√§rger[:n_clusters]
f√§rgkarta = {kluster: f√§rger_sorterade[i] for i, kluster in enumerate(kluster_medel.index)}
lekplatser['f√§rg'] = lekplatser['kluster'].map(f√§rgkarta)

# --- Skapa karta ---
if valda_h√•llplatsnamn:
    vald_h√•llplats = h√•llplatser[h√•llplatser['name'] == valda_h√•llplatsnamn].iloc[0]
    vald_position = (vald_h√•llplats['lat'], vald_h√•llplats['lon'])

    lekplatser['avst√•nd_till_vald'] = lekplatser.apply(
        lambda row: geodesic((row['lat'], row['lon']), vald_position).meters, axis=1
    )
    lekplatser_n√§ra = lekplatser[lekplatser['avst√•nd_till_vald'] <= radie].copy()

    def f√§rg_avst√•nd(avst√•nd):
        if avst√•nd < 181:
            return 'green'
        elif avst√•nd < 344:
            return 'orange'
        elif avst√•nd < 596:
            return 'red'
        else:
            return 'purple'

    lekplatser_n√§ra['f√§rg_filtrerad'] = lekplatser_n√§ra['avst√•nd_till_vald'].apply(f√§rg_avst√•nd)

    karta = folium.Map(location=[vald_h√•llplats['lat'], vald_h√•llplats['lon']], zoom_start=14)

if valda_h√•llplatsnamn and vald_position is not None:
    # Filtrerat l√§ge ‚Äì lekplatser n√§ra vald h√•llplats
    for _, rad in lekplatser_n√§ra.iterrows():
        if klustringsval == "H√•llplatsavst√•nd":
            popup_text = f"{rad['name']}<br> {int(rad['avst√•nd_m'])} m till h√•llplats<br>{uppskattad_g√•ngtid(rad['avst√•nd_m'])}"
        elif klustringsval == "Toalettavst√•nd":
            popup_text = f"{rad['name']}<br> {int(rad['avst√•nd_toalett'])} m till toalett<br>{uppskattad_g√•ngtid(rad['avst√•nd_toalett'])}"
        else:
            popup_text = (
                f"{rad['name']}<br>"
                f"{int(rad['avst√•nd_m'])} m till h√•llplats {uppskattad_g√•ngtid(rad['avst√•nd_m'])}<br>"
                f"{int(rad['avst√•nd_toalett'])} m till toalett {uppskattad_g√•ngtid(rad['avst√•nd_toalett'])}"
            )

        folium.Marker(
            location=(rad['lat'], rad['lon']),
            popup=popup_text,
            icon=folium.Icon(color=rad['f√§rg_filtrerad'], icon='child', prefix='fa')
        ).add_to(karta)

    # Markera vald h√•llplats
    folium.CircleMarker(
        location=vald_position,
        radius=4,
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.7,
        popup=vald_h√•llplats['name']
    ).add_to(karta)

else:
    # Standardl√§ge ‚Äì visa alla lekplatser
    karta = folium.Map(location=[57.7, 11.97], zoom_start=12)
    
    for _, rad in lekplatser.iterrows():
        if klustringsval == "H√•llplatsavst√•nd":
            popup_text = f"{rad['name']}<br> {int(rad['avst√•nd_m'])} m till h√•llplats<br> {uppskattad_g√•ngtid(rad['avst√•nd_m'])}"
        elif klustringsval == "Toalettavst√•nd":
            popup_text = f"{rad['name']}<br> {int(rad['avst√•nd_toalett'])} m till toalett<br> {uppskattad_g√•ngtid(rad['avst√•nd_toalett'])}"
        else:
            popup_text = (
                f"{rad['name']}<br>"
                f"{int(rad['avst√•nd_m'])} m till h√•llplats {uppskattad_g√•ngtid(rad['avst√•nd_m'])}<br>"
                f"{int(rad['avst√•nd_toalett'])} m till toalett {uppskattad_g√•ngtid(rad['avst√•nd_toalett'])}"
            )

        folium.Marker(
            location=(rad['lat'], rad['lon']),
            popup=popup_text,
            icon=folium.Icon(color=rad['f√§rg'], icon='child', prefix='fa')
        ).add_to(karta)

if not valda_h√•llplatsnamn:
    # Visa alla h√•llplatser (standardl√§ge)
    for _, rad in h√•llplatser.iterrows():
        folium.CircleMarker(
            location=(rad['lat'], rad['lon']),
            radius=3,
            color='blue',
            opacity=0.6,
            fill=True,
            fill_color='blue',
            fill_opacity=0.4,
            popup=rad['name']
        ).add_to(karta)
else:
    # Visa endast den valda h√•llplatsen
    folium.CircleMarker(
        location=(vald_position),
        radius=4,
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.7,
        popup=vald_h√•llplats['name']
    ).add_to(karta)

# Visa toaletter om relevant
if "Toalett" in klustringsval or "b√•de" in klustringsval.lower():
    for _, rad in toaletter_df.iterrows():
        folium.Marker(
            location=(rad['lat'], rad['lon']),
            popup="Toalett",
            icon=folium.Icon(color='cadetblue', icon='restroom', prefix='fa')
        ).add_to(karta)

# --- Dynamisk legend ---
if klustringsval == "H√•llplatsavst√•nd":
    kluster_max = lekplatser.groupby('kluster')['avst√•nd_m'].max()
    beskrivningstyp = "till h√•llplats"
    kluster_beskrivning = {
    f√§rgkarta[kl]: f"max {int(kluster_max[kl])}m ({uppskattad_g√•ngtid(kluster_max[kl])}) {beskrivningstyp}" for kl in kluster_max.index
}
elif klustringsval == "Toalettavst√•nd":
    kluster_max = lekplatser.groupby('kluster')['avst√•nd_toalett'].max()
    beskrivningstyp = "till toalett"
    kluster_beskrivning = {
    f√§rgkarta[kl]: f"max {int(kluster_max[kl])}m ({uppskattad_g√•ngtid(kluster_max[kl])}) {beskrivningstyp}" for kl in kluster_max.index
}
else:
    # Kombinationen h√•llplats + toalett
    beskrivningstyp = "kombinerad tillg√•ng till h√•llplats och toalett"
    kvalitetsniv√•er = {
        0: "Mycket n√§ra b√•de h√•llplats och toalett",
        1: "N√§ra b√•da",
        2: "Medeln√§ra b√•da",
        3: "L√§ngre bort till minst en",
        4: "L√•ngt till b√•da"
    }
    kluster_beskrivning = {
        f√§rgkarta[kl]: kvalitetsniv√•er.get(i, "") for i, kl in enumerate(kluster_medel.index)
    }

legend_html = "<div style='background-color:#f0f0f0;padding:10px;border-radius:10px;border:1px solid #ccc;font-size:15px; color: black;'>"
for f√§rg in f√§rger_sorterade:
    text = kluster_beskrivning.get(f√§rg, "")
    emoji = {
        'green': "üü¢", 'orange': "üü†", 'red': "üî¥", 'purple': "üü£", 'black': "‚ö´"
    }.get(f√§rg, "‚¨§")
    legend_html += f"{emoji} Lekplats ({text})<br>"
legend_html += "üîµ H√•llplats<br>"
if klustringsval in ["Toalettavst√•nd", "B√•de h√•llplats + toalett"]:
    legend_html += "üü¶ Toalett<br>"
legend_html += "</div>"

col1, _ = st.columns([3, 1])
with col1:
    folium_static(karta)
    st.markdown(legend_html, unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

with st.expander("Om HackStreet Boys"):
    st.markdown("""
**Om applikationen**  
Version: 1.0  
Senast uppdaterad: 21 maj 2025  

**Utvecklare**  
Victoria Johansson, Lina Axelson, Eleonor Borgqvist, Ebba Reis och Ella Anderz√©n  
Studenter vid G√∂teborgs universitet  

**Datak√§llor**  
- GTFS-data fr√•n V√§sttrafik (via KoDa-dataset fr√•n Trafiklab)  
- Lekplatsdata fr√•n OpenStreetMap (OSM)  

**Teknisk information**  
- Kartan visar endast lekplatser och h√•llplatser inom omr√•det:  
  **lat:** 57.5‚Äì57.85, **lon:** 11.7‚Äì12.1  
- G√•ngtid ber√§knas med en genomsnittlig hastighet p√• **5 km/h**

**Kontakt & feedback**  
Har du fr√•gor, f√∂rslag, hittat en bugg eller vill veta mer?  
Kontakta: [victoriaj0109@outlook.com](mailto:victoriaj0109@outlook.com)  
GitHub: [group-project-hackstreet-boys](https://github.com/SVP-GU/group-project-hackstreet-boys)
    """, unsafe_allow_html=True)
